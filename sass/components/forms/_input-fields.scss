/* Text Inputs + Textarea
   ========================================================================== */

/* Style Placeholders */

::placeholder {
  color: $placeholder-text-color;
}

/* Text inputs */

input:not([type]):not(.browser-default),
input[type=text]:not(.browser-default),
input[type=password]:not(.browser-default),
input[type=email]:not(.browser-default),
input[type=url]:not(.browser-default),
input[type=time]:not(.browser-default),
input[type=date]:not(.browser-default),
input[type=datetime]:not(.browser-default),
input[type=datetime-local]:not(.browser-default),
input[type=month]:not(.browser-default),
input[type=tel]:not(.browser-default),
input[type=number]:not(.browser-default),
input[type=search]:not(.browser-default),
textarea.materialize-textarea {
  //border-bottom: $input-border;
  //border-radius: 0;
  //margin: $input-margin;
  //box-sizing: content-box;
  //transition: box-shadow .3s, border .3s;
  
  outline: none;
  //box-shadow: none;
  background-color: transparent;
  color: $input-color;
  // CSS
  border: none;
  box-sizing: border-box; /* https://stackoverflow.com/questions/1377719/padding-within-inputs-breaks-width-100*/
  width: 100%;  
  //padding: $input-padding;

  border-top: 1px solid transparent;
  border-bottom: 1px solid $input-border-color;

  // M3-Specs
  font-size: $md_sys_typescale_body-large_size; //$input-font-size; // => 16 dp
  height: 56px; // 56dp $input-height;
  //padding: 0.5rem 1rem; // y:8dp  x:16dp

  // Focused label style
  /*
  &:focus:not([readonly]), &:not(:placeholder-shown) {
    padding: 
  }
  */

  // &:focus:not([readonly]) + label {
  //   color: $input-focus-color;
  //   transform: translate(0, -1.5rem) scale(0.85);
  // }
  // // Stay in Place after Populated
  // &:not(:placeholder-shown) + label {
  //   transform: translate(0, -1.5rem) scale(0.85);
  // }




  // Disabled input style
  &:disabled,
  &[readonly="readonly"] {    
    color: $input-disabled-color;
    border-bottom: $input-disabled-border;
  }
  // Disabled label style
  &:disabled + label,
  &[readonly="readonly"] + label {
    color: $input-disabled-color;
  }


  // // Focused input style
  // &:focus:not([readonly]) {
  //   border-color: $input-focus-color;
  //   box-shadow: 0 0px 0 0 $input-focus-color;
  // }

  // Hide helper text on data message
  &.valid ~ .helper-text[data-success],
  &:focus.valid ~ .helper-text[data-success],
  &.invalid ~ .helper-text[data-error],
  &:focus.invalid ~ .helper-text[data-error] {
    @extend %hidden-text;
  }

  // Valid Input Style
  &.valid,
  &:focus.valid {
    @extend %valid-input-style;
  }

  // Custom Success Message
  &.valid ~ .helper-text:after,
  &:focus.valid ~ .helper-text:after {
    @extend %custom-success-message;
  }
  &:focus.valid ~ label {
    color: $input-success-color;
  }

  // Invalid Input Style
  &.invalid,
  &:focus.invalid {
    @extend %invalid-input-style;
  }

  // Custom Error message
  &.invalid ~ .helper-text:after,
  &:focus.invalid ~ .helper-text:after {
    @extend %custom-error-message;
  }
  &:focus.invalid ~ label {
    color: $input-error-color;
  }

  // Full width label when using validate for error messages
  &.validate + label {
    width: 100%;
  }

  // Form Message Shared Styles
  & + label:after {
    @extend %input-after-style;
  }
}


/* Validation Sass Placeholders */
%valid-input-style {
  border-bottom: 1px solid $input-success-color;
  box-shadow: 0 1px 0 0 $input-success-color;
}
%invalid-input-style {
  border-bottom: $input-invalid-border;
  box-shadow: 0 1px 0 0 $input-error-color;
}
%hidden-text {
  color: transparent;
  user-select: none;
  pointer-events: none;
}
%custom-success-message {
  content: attr(data-success);
  color: $input-success-color;
}
%custom-error-message {
  content: attr(data-error);
  color: $input-error-color;
}

%input-after-style {
  display: block;
  content: "";
  position: absolute;
  top: 100%;
  left: 0;
  opacity: 0;
  transition: .2s opacity ease-out, .2s color ease-out;
}

// Styling for input field wrapper
.input-field {
  position: relative;
  margin-bottom: 24px;

  & > label {
    color: $input-border-color;
    user-select: none;
    font-size: 16px;
    position: absolute;
    left: 16px;
    top: 16px;
    cursor: text;
    transform-origin: top left;
    transition: font-size 0.2s ease-out, top 0.2s ease-out;
    
    // Prevent label from floating on top of default HTML placeholders
    /*
    &:not(.active) + input[type=date],
    &:not(.active) + input[type=datetime-local],
    &:not(.active) + input[type=month],
    &:not(.active) + input[type=time] {
      color: transparent;
    }
    */
  }

  // https://m3.material.io/styles/shape/shape-scale-tokens

  &.filled {
    border-radius: 4px; // md.sys.shape.corner.extra-small.top
    background-color: var(--focus-color);
    border-bottom-left-radius: 0;
    border-bottom-right-radius: 0;
    input {
      padding: 0 16px;
      padding-top: 20px;
      &:focus:not([readonly]) {
        border-top: 1px solid transparent;
        border-bottom: 2px solid $input-focus-color;
      }      
      &:focus:not([readonly]) + label {
        color: $input-focus-color;        
      }
      &:focus:not([readonly]) + label,
      &:not(:placeholder-shown) + label {
        font-size: 12px;
        top: 8px;
      }
    }
  }

  &.outlined {
    input {
      border: 1px solid $input-border-color;
      border-radius: 4px; // md.sys.shape.corner.extra-small
      padding-left: 16px;
      &:focus:not([readonly]) {
        border: 2px solid $input-focus-color;
      }
      &:focus:not([readonly]) + label {
        color: $input-focus-color;
      }
      &:focus:not([readonly]) + label,
      &:not(:placeholder-shown) + label {
        font-size: 12px;
        transform: translate(-4px, -1.5rem);
        background-color: var(--background-color);
        padding: 0 5px;
      }
    }
  }

  .supporting-text {
    color: $input-border-color;
    font-size: 12px;
    position: absolute;
    left: 0;
    padding: 0 16px;
    margin-top: 4px;
  }
  .character-counter {
    color: $input-border-color;
    font-size: 12px;
    position: absolute;
    right: 0;
    padding: 0 16px;
    margin-top: 4px;
  }

  // Inline styles
  /*
  &.inline {
    display: inline-block;
    vertical-align: middle;
    margin-left: 5px;
    input,
    .select-dropdown {
      margin-bottom: 1rem;
    }
  }
  */
  // Gutter spacing
  /*
  &.col {
    label {
      left: $gutter-width * 0.5;
    }

    .prefix ~ label,
    .prefix ~ .validate ~ label,
    .suffix ~ label,
    .suffix ~ .validate ~ label  {
      width: calc(100% - 3rem - #{$gutter-width});
    }
  }
  */  

  // Autofill + date + time inputs
  /*
  & > input[type]:-webkit-autofill:not(.browser-default):not([type="search"]) + label,
  & > input[type=date]:not(.browser-default) + label,
  & > input[type=time]:not(.browser-default) + label {
    //transform: translateY(-14px) scale(.8);
    //transform-origin: 0 0;
  }
  */

  .helper-text {
    &::after {
      opacity: 1;
      position: absolute;
      top: 0;
      left: 0;
    }

    position: relative;
    min-height: 18px;
    display: block;
    font-size: 12px;
    color: $font-color-medium;
  }

  // Prefix Icons
  .prefix, .suffix {
    position: absolute;
    width: $input-height;
    font-size: $input-icon-size;
    transition: color .2s;
    top: ($input-height - $input-icon-size) * 0.5;

    &.active { color: $input-focus-color; }
  }

  .prefix ~ input,
  .prefix ~ textarea,
  .prefix ~ .select-wrapper,
  .prefix ~ label,
  .prefix ~ .validate ~ label,
  .prefix ~ .helper-text,
  .prefix ~ .autocomplete-content {
    margin-left: 3rem;
    width: 92%;
    width: calc(100% - 3rem);
  }

  .prefix ~ label { margin-left: 3rem; }

  @media #{$medium-and-down} {
    .prefix ~ input,
    .suffix ~ input {
      width: 86%;
      width: calc(100% - 3rem);
    }
  }

  @media #{$small-and-down} {
    .prefix ~ input,
    .suffix ~ input {
      width: 80%;
      width: calc(100% - 3rem);
    }
  }


  // Suffix Icons
  .suffix {
    right: 0;
  }

  .suffix ~ input,
  .suffix ~ textarea,
  .suffix ~ .select-wrapper,
  .suffix ~ label,
  .suffix ~ .validate ~ label,
  .suffix ~ .helper-text,
  .suffix ~ .autocomplete-content {
    margin-right: 3rem;
    width: 92%;
    width: calc(100% - 3rem);
  }

  .suffix ~ label { margin-right: 3rem; }

}

/* Search Field */

.input-field input[type=search] {
  display: block;
  line-height: inherit;
  transition: .3s background-color;

  .nav-wrapper & {
    height: inherit;
    padding-left: 4rem;
    width: calc(100% - 4rem);
    border: 0;
    box-shadow: none;
  }

  &:focus:not(.browser-default) {
    border: 0;
    box-shadow: none;
  }

  & + .label-icon {
    transform: none;
    left: 1rem;
  }

  & ~ .mdi-navigation-close,
  & ~ .material-icons {
    position: absolute;
    top: 0;
    right: 1rem;
    color: transparent;
    cursor: pointer;
    font-size: $input-icon-size;
    transition: .3s color;
  }
}


/* Textarea */

// Default textarea
textarea {
  width: 100%;
  height: $input-height;
  background-color: transparent;

  &.materialize-textarea {
    line-height: normal;
    overflow-y: hidden; /* prevents scroll bar flash */
    padding: .8rem 0 .8rem 0; /* prevents text jump on Enter keypress */
    resize: none;
    min-height: $input-height;
    box-sizing: border-box;
  }
}

// For textarea autoresize
.hiddendiv {
  visibility: hidden;
  white-space: pre-wrap;
  word-wrap: break-word;
  overflow-wrap: break-word; /* future version of deprecated 'word-wrap' */
  padding-top: 1.2rem; /* prevents text jump on Enter keypress */

  // Reduces repaints
  position: absolute;
  top: 0;
  z-index: -1;
}

/* Autocomplete */
.autocomplete-content {
  li {
    .highlight { color: $font-color-main; }

    img {
      height: $dropdown-item-height - 10;
      width: $dropdown-item-height - 10;
      margin: 5px 15px;
    }
  }
}
